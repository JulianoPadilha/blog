{"componentChunkName":"component---src-templates-blog-post-js","path":"/back-to-basics-flexbox/","result":{"data":{"site":{"siteMetadata":{"title":"Juliano Padilha"}},"markdownRemark":{"id":"25299a1a-0fd4-56e3-99aa-86223a0e919a","excerpt":"O Flexbox, segundo a MDN, é parte do rascunho da especificação do CSS3. Ele provê uma CSS Box Model otimizada para o design de interfaces com o usuário…","html":"<p>O Flexbox, segundo a <a href=\"https://developer.mozilla.org/pt-BR/docs/CSS/Usando_caixas_flexiveis_css\">MDN</a>, é parte do rascunho da especificação do CSS3. Ele provê uma CSS Box Model otimizada para o design de interfaces com o usuário. Elementos filhos no layout flex podem ser posicionados em qualquer direção e possuem dimensões flexíveis para se adaptar ao espaço disponível. Posicionar esses elementos filhos pode ser feito facilmente, e layouts complexos podem ser construídos de uma maneira mais clara e limpa. A ordem de exibição dos elementos é independente da ordem no código fonte.</p>\n<h2>Fundamentos do Flexbox</h2>\n<p>Existem dois diferentes grupos, os Flex Containers e os Flex Items (que são os itens que estão dentro do container).</p>\n<h2>Flex Containers</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Propriedades\n\tdisplay\n\tflex-direction\n\tflex-wrap\n\tflex-flow\n\tjustify-content\n\talign-items\n\talign-content</code></pre></div>\n<h3>display</h3>\n<p>Define o elemento como um flex container, tornando seus filhos flex-items.</p>\n<ul>\n<li><em>display: flex;</em></li>\n</ul>\n<h3>flex-direction</h3>\n<p>Define a direção dos flex-items. Por padrão ele e row (linha), por isso quando o display: flex; é adicionado, os elementos ficam em linha, um do lado do outro.</p>\n<p>A mudança de row para column geralmente acontece quando estamos definindo estilos em media queries para o mobile. Assim você garante que o conteúdo seja apresentado em coluna única.</p>\n<ul>\n<li><em>flex-direction: row;</em></li>\n<li><em>flex-direction: row-reverse;</em></li>\n<li><em>flex-direction: column;</em></li>\n<li><em>flex-direction: column-reverse;</em></li>\n</ul>\n<h3>flex-wrap</h3>\n<p>Define se os itens devem quebrar ou não a linha. Por padrão eles não quebram linha, isso faz com que os flex-items sejam compactados além do limite do conteúdo.</p>\n<p>Essa é geralmente uma propriedade que é quase sempre definida como flex-wrap: wrap; Pois assim quando um dos flex-items atinge o limite do conteúdo, o último item passa para a coluna debaixo e assim por diante.</p>\n<ul>\n<li><em>flex-wrap: nowrap;</em></li>\n<li><em>flex-wrap: wrap;</em> </li>\n<li><em>flex-wrap: wrap-reverse;</em></li>\n</ul>\n<h3>flex-flow</h3>\n<p>O flex-flow é um atalho para as propriedades flex-direction e flex-wrap. Você não verá muito o seu uso, pois geralmente quando mudamos o flex-direction para column, mantemos o padrão do flex-wrap que é nowrap.</p>\n<p>E quando mudamos o flex-wrap para wrap, mantemos o padrão do flex-direction que é row.</p>\n<ul>\n<li><em>flex-flow: row nowrap;</em></li>\n<li><em>flex-flow: row wrap;</em></li>\n<li><em>flex-flow: column nowrap;</em></li>\n</ul>\n<h3>justify-content</h3>\n<p>Alinha os flex-items no container de acordo com a direção. A propriedade só funciona se os itens atuais não ocuparem todo o container. Isso significa que ao definir flex: 1; ou algo similar nos itens, a propriedade não terá mais função.</p>\n<p>Excelente propriedade para ser usada em casos que você deseja alinhar um item na ponta esquerda e outro na direita, como em um simples header com marca e navegação.</p>\n<ul>\n<li><em>justify-content: flex-start;</em> </li>\n<li><em>justify-content: flex-end;</em> </li>\n<li><em>justify-content: center;</em> </li>\n<li><em>justify-content: space-between;</em></li>\n<li><em>justify-content: space-around;</em></li>\n</ul>\n<h3>align-items</h3>\n<p>O align-items alinha os flex-items de acordo com o eixo do container. O alinhamento é diferente para quando os itens estão em colunas ou linhas.</p>\n<p>Essa propriedade permite o tão sonhado alinhamento central no eixo vertical, algo que antes só era possível com diferentes hacks.</p>\n<ul>\n<li><em>align-items: stretch;</em> </li>\n<li><em>align-items: flex-start;</em></li>\n<li><em>align-items: flex-end;</em></li>\n<li><em>align-items: center;</em></li>\n<li><em>align-items: baseline;</em></li>\n</ul>\n<h3>align-content</h3>\n<p>Alinha as linhas do container em relação ao eixo vertical. A propriedade só funciona se existir mais de uma linha de flex-items. Para isso o flex-wrap precisa ser wrap.</p>\n<p>Além disso o efeito dela apenas será visualizado caso o container seja maior que a soma das linhas dos itens. Isso significa que se você não definir height para o container, a propriedade não influencia no layout.</p>\n<ul>\n<li><em>align-content: stretch;</em> </li>\n<li><em>align-content: flex-start;</em> </li>\n<li><em>align-content: flex-end;</em> </li>\n<li><em>align-content: center;</em> </li>\n<li><em>align-content: space-between;</em> </li>\n<li><em>align-content: space-around;</em></li>\n</ul>\n<h2>Flex Items</h2>\n<p>Os Flex Items são os filhos diretos do Flex Container, lembrando que uma tag se torna flex container a partir do momento que você definir display: flex.</p>\n<p>É possível que um Flex Item seja também um Flex Container, basta definir display: flex; nele. Assim os filhos desse item também serão flex-items.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Propriedades\n\tflex-grow\n\tflex-basis\n\tflex-shrink\n\tflex\n\torder\n\talign-self\n\t</code></pre></div>\n<h3>flex-grow</h3>\n<p>Define a habilidade de um flex-item crescer. Por padrão o valor é zero, assim os flex items ocupam um tamanho máximo relacionado com conteúdo interno deles ou ao width definido.</p>\n<p>Ao definir 1 para todos os flex-items, eles tentarão ter a mesma largura e vão ocupar 100% do container. Digo tentarão pois caso um elemento possua um conteúdo muito largo, ele irá respeitar o mesmo.</p>\n<p>Se você tiver uma linha com quantro itens, onde três são flex-grow: 1 e flex-grow 2, o flex-grow: 2 tentará ocupar 2 vezes mais espaço extra do que os outros elementos.</p>\n<p>OBS: justify-content não funciona em items com flex-grow definido.</p>\n<ul>\n<li><em>flex-grow: número;</em></li>\n<li><em>flex-grow: 0;</em></li>\n</ul>\n<h3>flex-basis</h3>\n<p>Indica o tamanho inicial do flex-item antes da distribuição do espaço restante.</p>\n<p>Quando definimos o flex-grow: 1; e possuímos auto no basis, o valor restante para ocupar o container é distribuído ao redor do conteúdo do flex-item.</p>\n<ul>\n<li><em>flex-basis: auto;</em></li>\n<li><em>flex-basis: unidade;</em> <strong>Pode ser em %, em, px e etc.</strong> </li>\n<li><em>flex-basis: 0;</em></li>\n</ul>\n<h3>flex-shrink</h3>\n<p>Define a capacidade de redução de tamanho do item.</p>\n<ul>\n<li><em>flex-shrink: 1;</em> </li>\n<li><em>flex-shrink: 0;</em></li>\n<li><em>flex-shrink: número;</em></li>\n</ul>\n<h3>flex</h3>\n<p>Atalho para as propriedades flex-grow, flex-shrink e flex-basis. Geralmente você verá a propriedade flex nos flex-items ao invés de cada um dos valores separados.</p>\n<p>Para melhor consistência entre os browsers, é recomendado utilizar a propriedade flex ao invés de cada propriedade separada.</p>\n<h3>order</h3>\n<p>Modifica a ordem dos flex-items. Sempre do menor para o maior, assim order: 1, aparece na frente de order: 5.</p>\n<ul>\n<li><em>order: número;</em> </li>\n<li><em>order: 0;</em> <strong>Padrão</strong></li>\n</ul>\n<h3>align-self</h3>\n<p>O align-self serve para definirmos o alinhamento específico de um único flex-item dentro do nosso container. Caso um valor seja atribuído, ele passará por cima do que for atribuído no align-items do container.</p>\n<ul>\n<li><em>align-self: auto;</em></li>\n<li><em>align-self: flex-start;</em> </li>\n<li><em>align-self: flex-end;</em> </li>\n<li><em>align-self: center;</em> </li>\n<li><em>align-self: baseline;</em> </li>\n<li><em>align-self: stretch;</em></li>\n</ul>\n<h2>Referências:</h2>\n<p><a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\">CSS-Tricks: A Complete Guide to Flexbox</a></p>\n<p><a href=\"https://developer.mozilla.org/pt-BR/docs/CSS/Usando_caixas_flexiveis_css\">MDN</a></p>\n<p><a href=\"https://tableless.com.br/flexbox-organizando-seu-layout/\">Tableless: Flexbox - Organizando Seu Layout</a></p>\n<p><a href=\"http://pt-br.learnlayout.com/flexbox.html\">Aprenda Layout com CSS</a></p>\n<p><a href=\"https://bocoup.com/blog/dive-into-flexbox/\">Dive into Flexbox</a></p>\n<p><a href=\"https://www.origamid.com/projetos/flexbox-guia-completo/\">Origamid: Flexbox Guia Completo</a></p>\n<p><a href=\"https://github.com/afonsopacifer/awesome-flexbox\">GitHub: awesome-flexbox</a></p>\n<p><a href=\"https://github.com/philipwalton/flexbugs\">GitHub: flexbugs</a></p>","frontmatter":{"title":"Back to basics - Flexbox","date":"May 21, 2017","description":null}}},"pageContext":{"slug":"/back-to-basics-flexbox/","previous":{"fields":{"slug":"/debug-tips-chrome-dev-tools/"},"frontmatter":{"title":"Debug tips - Chrome Developer Tools"}},"next":{"fields":{"slug":"/brazil-js-2017-maior-conferencia-js-do-universo/"},"frontmatter":{"title":"Um pouco sobre a BrazilJS 2017 - a maior conferência JavaScript do Universo"}}}},"staticQueryHashes":["2841359383","916993862"]}