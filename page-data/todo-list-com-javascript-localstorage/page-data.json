{"componentChunkName":"component---src-templates-blog-post-js","path":"/todo-list-com-javascript-localstorage/","result":{"data":{"site":{"siteMetadata":{"title":"Juliano Padilha"}},"markdownRemark":{"id":"8dc082a4-e0e1-501a-b85f-bea41ef22927","excerpt":"Decidi escrever este post para falar um pouco sobre uma API muito interessante do HTML, mas que pouco ouvimos falar a respeito. O que tamb√©m me motivou a‚Ä¶","html":"<p>Decidi escrever este post para falar um pouco sobre uma API muito interessante do HTML, mas que pouco ouvimos falar a respeito. O que tamb√©m me motivou a escrever este conte√∫do, √© que recentemente percebi que consigo fixar melhor o que estudo quando tenho a oportunidade de fazer anota√ß√µes sobre o assunto. Se voc√™ der uma olhada no meu <a href=\"https://github.com/JulianoPadilha\">GitHub</a>, ver√° que estou de fato colocando isso em pr√°tica e tomando anota√ß√µes como parte do meu m√©todo de aprendizado. ü§ì</p>\n<p>Pretendo tornar este tipo de conte√∫do uma s√©rie dentro do meu site chamada ‚ÄúHow to Build‚Äù. Acredito que ser√° bem interessante e pretendo abordar os mais diversos assuntos, e claro, mostrar como se faz na pr√°tica, com uma pitada de teoria. Ent√£o vamos l√°?! </p>\n<h2>O que √© Web Storage?</h2>\n<p>Web Storage faz parte da API do HTML e fornece mecanismos para que os navegadores possam armazenar dados atrav√©s de chave/valor de uma forma mais eficiente que os cookies. A API do Web Storage fornece duas maneiras de armazenar dados:</p>\n<ul>\n<li><code class=\"language-text\">sessionStorage</code>\nO sessionStorage mant√©m as informa√ß√µes armazenadas por origem e permanece dispon√≠vel enquanto h√° uma sess√£o aberta no navegador(mesmo a p√°gina sendo recarregada). Caso o browser seja fechado a sess√£o ser√° limpa e as informa√ß√µes ser√£o perdidas.</li>\n<li><code class=\"language-text\">localStorage</code>\nO localStorage √© muito parecido com o sessionStorage, a diferen√ßa √© que mesmo que o navegador seja fechado, os dados permanecem armazenados.</li>\n</ul>\n<p>Com Local Storage, aplica√ß√µes web podem armazenar dados localmente no navegador do usu√°rio. Antes do HTML5, os dados de uma aplica√ß√£o tinham que ser armazenados em cookies. Com Local Storage √© mais seguro realizar esse processo e grandes quantidades de dados podem ser armazenados localmente, sem afetar o desempenho do site.</p>\n<p>Ao contr√°rio dos cookies, o limite de armazenamento √© muito maior (pelo menos 5MB) e a informa√ß√£o n√£o √© transferida para o servidor.</p>\n<p>Local Storage √© muito √∫til, por exemplo, em sites de e-commerce, onde o usu√°rio pode ter adicionado algo no seu carrinho de compras e fechado o navegador. Quando ele retornar para o site, os itens do seu carrinho continuar√£o l√° dispon√≠veis, isso porque as informa√ß√µes foram armazenadas no Local Storage do seu browser. </p>\n<p>Esses mecanismos est√£o dispon√≠veis a partir das seguintes propriedades <code class=\"language-text\">Window.sessionStorage</code> e <code class=\"language-text\">Window.localStorage</code> (para um maior suporte, o objeto Window implementa os objetos  Window.LocalStorage e Window.SessionStorage) ‚Äî ao invocar uma dessas propriedades, √© criada uma inst√¢ncia do objeto Storage, que fornece m√©todos para inserir, recuperar e remover os dados.</p>\n<blockquote>\n<p>Fonte: <a href=\"https://developer.mozilla.org/pt-BR/docs/Web/API/Web_Storage_API_pt_br\">Mozilla Developer - Web Storage API</a></p>\n</blockquote>\n<h2>Propriedades</h2>\n<p><code class=\"language-text\">Storage.lenght</code>\nRetorna um inteiro que representa o n√∫mero de itens de dados armazenados no objeto de armazenamento.</p>\n<h2>M√©todos</h2>\n<p><code class=\"language-text\">Storage.key()</code>\nRetorna o nome da chave passada como par√¢metro.</p>\n<p><code class=\"language-text\">Storage.getItem()</code>\nQuando passado o nome de uma chave, retornar√° o valor dessa chave.</p>\n<p><code class=\"language-text\">Storage.setItem()</code>\nQuando passado o nome de uma chave, adicionar√° a chave no storage ou atualizar o valor da chave caso ela j√° exista.</p>\n<p><code class=\"language-text\">Storage.removeItem()</code>\nQuando passado o nome da chave, remover√° a chave do storage.</p>\n<p><code class=\"language-text\">Storage.clear()</code>\nQuando chamada, esvaziar√° todas as chaves fora do armazenamento.</p>\n<h2>Chega de teoria! Let‚Äôs make things happen!</h2>\n<p>Esse ser√° o resultado final do nosso ‚ÄúHow to Build‚Äù de hoje. N√£o est√° bonito, eu sei, seu sei.. Mas a ideia n√£o era essa, a ideia √© aprender os fundamentos de algo novo. Ent√£o fique a vontade para deixar o seu to-do list esteticamente mais bonito que o meu. üòâ</p>\n<p><img src=\"/blog/b51e7654b92e95bcb29a3ccfef9ae3bd/todo-list.gif\"></p>\n<h3>Estrutura de pastas e arquivos</h3>\n<p>Para nosso exemplo usaremos algo simples para nossa estrutura de pastas e arquivos:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">üìÅ app\n|___ index.html\n|___ style.css\n|___ todo.js</code></pre></div>\n<h3>index.html</h3>\n<p>Nossa p√°gina HTML tamb√©m √© super simples. De importante que devemos nos atentar, temos: </p>\n<ul>\n<li>O elemento <code class=\"language-text\">input</code> que vai servir para a entrada dos nossos dados;</li>\n<li>O elemento <code class=\"language-text\">button</code> que ir√° ser o principal respons√°vel por diversas a√ß√µes da aplica√ß√£o;</li>\n<li>Os dois elementos <code class=\"language-text\">div</code> que ir√£o ser respons√°veis, respectivamente, por exibir uma mensagem para o usu√°rio dependendo do status da sua lista de tarefas e listar todo os nossos to-do‚Äôs</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0, user-scalable=yes<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>style.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>To-Do List<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>todo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>add<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Add<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>msg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span> // Usaremos essa div para exibir uma mensagem dependendo do status do nosso storage \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>todos<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>todos<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span> // Usaremos essa div para exibir a nossa lista de to do's\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>todo.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Sussa?! Keep going!</p>\n<h3>todo.js</h3>\n<p>√â aqui que a brincadeira come√ßa a ficar interressante. <em>Muahahaha</em> </p>\n<p>Como dito na parte te√≥rica, o Web Storage disp√µe do <code class=\"language-text\">sessionStorage</code> e do <code class=\"language-text\">localStorage</code>. Como nossa intens√£o √© manter nosso to-do list mesmo ap√≥s o navegador ter sido fechado, ent√£o neste exemplo usaremos apenas o localStorage. </p>\n<p>Aaah, uma dica inicial. Voc√™s podem acompanhar o que est√° acontecendo no Local Storage de voc√™s acessando a aba Resources do Inspector de elementos do Chrome (tor√ßo que estejam utilizando o Chrome :P), como mostra o gif abaixo.</p>\n<p><img src=\"/blog/6d678c445c6f2e2f6fda308cfec89219/local-storage-inspector-elementos.gif\"></p>\n<p>Explicarei comentando trecho por trecho o que est√° acontecendo no c√≥digo. ü§ò</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">addTodo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> todo <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Pega o valor digitado no input e armazena na vari√°vel 'todo'.</span>\n\n    <span class=\"token keyword\">var</span> todos <span class=\"token operator\">=</span> <span class=\"token function\">getTodos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Chamamos em uma vari√°vel a fun√ß√£o 'getTodos' que cria um array que traz todas as todos salvas antes de inserir uma nova.</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// Verifica se h√° algum conte√∫do preenchido dentro do input</span>\n        todos<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Utilizamos o push para jogar o elemento armazenado na vari√°vel 'todo' para nosso Array.</span>\n\n        localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>todos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Utilizamos o localStorage.setItem para \"persistir\" as informa√ß√µes no storage do browser. Com par√¢metro passamos a chave e o valor, usando 'JSON.stringify' para transformar o valor em uma string.</span>\n\n        document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Retorna para vazio o input ap√≥s um item ser inserido.</span>\n    <span class=\"token punctuation\">}</span>\n\n    document<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span><span class=\"token function\">reload</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Utilizamos o reload(true) para ap√≥s a fun√ß√£o ser realizada atualizar a tela.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">getTodos</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> todos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Cria um array vazio caso n√£o tenha nada j√° armazenado.</span>\n\n    <span class=\"token keyword\">var</span> todos_string <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Pega o conte√∫do/valor da chave 'todos' do 'localStorage' e armazena na vari√°vel 'todos_string'</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>todos_string <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// Verifica se o array de elementos n√£o √© nulo. Caso true ent√£o retornar√° a convers√£o de um JSON string para um Javascript data.</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>todos_string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">showTodos</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> todos <span class=\"token operator\">=</span> <span class=\"token function\">getTodos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Guardamos em uma vari√°vel chamada 'todos' todos os todos que temos armazenadas utilizando a fun√ß√£o getTodos;</span>\n\n    <span class=\"token keyword\">var</span> html <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;ul>'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Criamos uma vari√°vel 'html' que ir√° concatenando a nossa estrutura HTML.</span>\n\n    todos<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">elemento<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// Criamos um forEach para iterar todos os elementos do nosso Array. Utilizamos 'todos' na frente para referenciar de qual lugar estamos trazendo os elementos. </span>\n        html <span class=\"token operator\">+=</span> <span class=\"token string\">'&lt;li> üìå '</span> <span class=\"token operator\">+</span> elemento <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;button class=\"remove\" id=\"'</span><span class=\"token operator\">+</span> index <span class=\"token operator\">+</span><span class=\"token string\">'\">Remover&lt;/button>&lt;/li>'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Novamente utilizamos a vari√°vel 'html' para concatenar nosso HTML passando o 'elemento' que referencia os itens pertencentes os todos. 'index' representa nosso index dentro do array.</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    html <span class=\"token operator\">+=</span> <span class=\"token string\">'&lt;/ul>'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Fechamos a concatena√ß√£o.</span>\n\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> html<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Inserimos o conte√∫do da vari√°vel 'html' dentro da 'div' que cont√©m o id 'todos'. O innerHTML serve justamente para inserir novos conte√∫dos.</span>\n\n    <span class=\"token keyword\">var</span> buttons <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'remove'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Pegamos todos os elementos do DOM que possuem a class 'remove' e armazenamos na vari√°vel 'buttons'.</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> buttons<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// Iteramos nossos elementos e adicionamos para cada elemento com a class 'remove' o addEventListener conectado com o evento 'click' e o callback da fun√ß√£o 'removeTodo'.</span>\n        buttons<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> removeTodo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">removeTodo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> id <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Criamos uma vari√°vel id para receber o atual objeto-DOM referente ao id do bot√£o remover que o usu√°rio clicar. O this representa o objeto-DOM atual.</span>\n\n    <span class=\"token keyword\">var</span> todos <span class=\"token operator\">=</span> <span class=\"token function\">getTodos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Guardamos em uma vari√°vel chamada 'todos' todos os todos que temos armazenadas utilizando a fun√ß√£o getTodos;</span>\n\n    todos<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Utilizamos o m√©todo splice para remover um elemento espec√≠fico. Como par√¢metro passamos o id referente ao elemento que ser√° removido do array e o valor \"1\", que representa que estamos realizando apenas uma remo√ß√£o.</span>\n\n    localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>todos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ap√≥s o elemento ser removido, utilizamos novamente o setItem para salvar a nossa nova lista de array.</span>\n\n    document<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span><span class=\"token function\">reload</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Utilizamos o reload(true) para ap√≥s a fun√ß√£o ser realizada atualizar a tela.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">hasTodo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// Fun√ß√£o que verifica se h√° algum todo salvo dentro do Array do localStorage.</span>\n\n    <span class=\"token keyword\">var</span> todos <span class=\"token operator\">=</span> <span class=\"token function\">getTodos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Guardamos em uma vari√°vel chamada 'todos' todos os todos que temos armazenadas utilizando a fun√ß√£o getTodos;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>todos <span class=\"token operator\">==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// Utilizamos uma condicional para exibir uma mensagem na tela de acordo com o status do nosso array.</span>\n        text <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;h2>N√£o h√° tarefas cadastradas!&lt;/h2>'</span><span class=\"token punctuation\">;</span>\n        document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'msg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        text <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;h2>Suas tarefas pendentes:&lt;/h2>'</span><span class=\"token punctuation\">;</span>\n        document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'msg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'add'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> addTodo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Buscamos o elemento contendo o id igual a 'add' e em seguinda utilizamos o m√©todo 'addEventListener' com o evento de 'click' e o callback que ser√° chamado, no caso, nossa fun√ß√£o addTodo.</span>\n\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'keydown'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// Inserimos uma alternativa para a inser√ß√£o os elementos, que √© pressionando a tecla 'enter'. Para este caso precisamos passar um par√¢metro que √© uma fun√ß√£o que recebe o evento com a keyCode que pressionamos. Depois verificamos se √© true e caso seja chama o addTodo(); </span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>keyCode <span class=\"token operator\">==</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">addTodo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token function\">hasTodo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Passamos a fun√ß√£o aqui para verificar antes mesmo de listar nossos elementos se o array √© vazio ou n√£o.</span>\n\n<span class=\"token function\">showTodos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Chamamos a fun√ß√£o showTodos() para mostrar na telas os elementos do nosso array.</span></code></pre></div>\n<p>Espero que tenha ficado claro. E por fim, vamos para o CSS s√≥ para fechar com chave de ouro. Ou n√£o.</p>\n<h3>style.css</h3>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">*</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Courier New\"</span><span class=\"token punctuation\">,</span> Courier<span class=\"token punctuation\">,</span> monospace<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #F3F3F3<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.header</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 470px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 auto<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 8px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.header input</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 400px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">text-indent</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.header input[type=\"text\"]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 14px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.header input:focus</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">outline-color</span><span class=\"token punctuation\">:</span> #99D04E<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.header button</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 34px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #99D04E<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 14px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span> lighter<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">hr</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #00BBC7<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #00BBC7<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 1px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">h2</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 400px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 auto<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 10px 0 20px 0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.remove</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #F46560<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 60px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 0 0 10px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 25px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span> pointer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.tasks</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">ul li</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">list-style</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 20px 200px 0px 50px<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>E assim finalizamos nosso To-Do List utilizando JavaScript e a API localStorage. Espero que tenha sido √∫til, e fico super aberto para feedbacks sobre como melhorar a did√°tica dos exemplos e tudo mais. Tamb√©m aceito com todo prazer feedbacks sobre o c√≥digo, o que pode ser melhorado, o que t√° errado, etc.. </p>\n<p>At√© uma pr√≥xima! ‚úåÔ∏è </p>","frontmatter":{"title":"Criando um To-Do List com JavaScript e Web Storage API","date":"July 24, 2016","description":null}}},"pageContext":{"slug":"/todo-list-com-javascript-localstorage/","previous":{"fields":{"slug":"/nubank-interface/"},"frontmatter":{"title":"Interface do app da Nubank"}},"next":{"fields":{"slug":"/precisamos-falar-sobre-progressive-enhancement/"},"frontmatter":{"title":"Precisamos falar sobre Progressive Enhancement"}}}},"staticQueryHashes":["2841359383","916993862"]}